swagger: "2.0"
info:
  description: "This is just an example of open-api spec"
  version: "1.0.0"
  title: "Trip Sample"
  contact:
    email: "osvaldo2627@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: /v1/trip
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: "customer"
    description: "Trip agency customer"
schemes:
  - "http"

definitions:
  Customer:
    type: "object"
    properties:
      id:
        type: "string"
        readOnly: true
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      birthday:
        type: "string"
        format: "date-time"
      weight: 
        type: "integer"
        minimum: 1
        maximum: 700
    required:
      - "firstName"
      - "email"

  CustomerUpdate:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      birthday:
        type: "string"
        format: "date-time"
      weight: 
        type: "integer"
        minimum: 1
        maximum: 700

paths:
  /customers:
    get:
      tags:
        - customer
      summary: "Return all customers"
      description: "Return an array of customers"
      responses:
        200:
          description: "successful operation"
          schema:
            items:
              $ref: "#/definitions/Customer"
            type: array    

    post:
      tags:
        - customer
      summary: "Create a customer"
      description: ""
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: '#/definitions/Customer'
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Customer"
        400:
          description: "Invalid Customer"
        409:
          description: "Conflic"
          
  /customers/{id}:
    get:
      tags:
        - customer
      summary: "Find a customer by ID"
      description: ""
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the customer to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Customer"
        404:
          description: "Customer not found"
    delete:
      tags:
      - customer
      summary: "Delete a customer by ID"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the customer to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Customer"
        404:
          description: "Customer not found"
    patch:      
      tags:
      - customer
      summary: "Delete a customer"
      description: ""
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the customer to be deleted"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "customer data to be updated"
        required: true
        schema:
          $ref: "#/definitions/CustomerUpdate"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Customer"
        400:
          description: "Invalid Customer"
        404:
          description: "Customer not found"
        
externalDocs:
  description: "Find out more about this api"
  url: "http://valdo2627.yandex.com"